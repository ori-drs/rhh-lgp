QUIT
WAIT
INFEASIBLE
ANY
Terminate

FOL_World{
  hasWait=false
  gamma = 1.
  stepCost = 0.
  timeCost = 0.
}

## basic predicates
gripper
object
table
placingTemporary
knob
drawer
opened_frame
knobBase
openingLocation
closingLocation
body
partOf
base

on
busy     # involved in an ongoing (durative) activity
free     # gripper hand is free
held     # object is held by an gripper
picked   # gripper X holds/has picked object Y
placed   # gripper X holds/has picked object Y
graspTop
orientation
adjusted

## KOMO symbols
touch
above
graspTop
stable
stableOn
gripperOrientation
pitchGripperDown
rotateBase
takeknob
opendrawer
pickObject
grasped
opened
open
placedindrawer
stablePose
closed
close
pickedForPlacing
takenKnob
placeindrawer
pickedObject

## initial state (generated by the code)
START_STATE {}

### RULES

#####################################################################

### Reward
REWARD {
}

#####################################################################



#####################################################################

DecisionRule takeknob {
  G, K, O, C
  { (gripper G) (knob K) (object O) (closingLocation C)}
  { (above K ANY)! (on ANY K)! (stableOn ANY K)! 
    (picked G K) (held K) (busy G) # these are only on the logical side, to enable correct preconditions
    (touch G K) (touch G C) (open G K) (stable G K) (takenKnob G K) # these are predicates that enter the NLP
    }
}



#####################################################################

DecisionRule opendrawer {
  G, K, D, F, O
  { (gripper G) (knob K) (object O) (drawer D) (openingLocation F) (takenKnob G K)}
  { (picked G K)!
    (open G K)  (touch G F) (touch K F) (touch G K)! (busy G)! (held O)! 
    (grasped G F)
    }
}





