QUIT
WAIT
INFEASIBLE
ANY
Terminate

FOL_World{
  hasWait=false
  gamma = 1.
  stepCost = 0.
  timeCost = 0.
}

## basic predicates
gripper
object
table
placingTemporary
knob
drawer
opened_frame
knobBase
openingLocation
closingLocation
body
partOf
base

on
busy     # involved in an ongoing (durative) activity
free     # gripper hand is free
held     # object is held by an gripper
picked   # gripper X holds/has picked object Y
placed   # gripper X holds/has picked object Y
graspTop
orientation
adjusted

## KOMO symbols
touch
above
graspTop
stable
stableOn
gripperOrientation
pitchGripperDown
rotateBase
takeknob
opendrawer
pickObject
grasped
opened
open
placedindrawer
stablePose
closed
close
pickedForPlacing
takenKnob
placeindrawer
pickedObject

## initial state (generated by the code)
START_STATE {}

### RULES

#####################################################################

### Reward
REWARD {
}

#####################################################################


DecisionRule adjust {
  W, Y
  { (base W) (object Y) }
  { (rotateBase W Y) (adjusted W Y) }
}

#####################################################################

DecisionRule pick {
  X, Y, W
  { (gripper X) (object Y) (busy X)! (held Y)! (base W) (INFEASIBLE pick X Y)!}
  { (above Y ANY)! (on ANY Y)! (stableOn ANY Y)! 
    (picked X Y) (held Y) (busy X) # these are only on the logical side, to enable correct preconditions
    (touch X Y) (gripperOrientation X Y) (pitchGripperDown X Y) (stable X Y) # these are predicates that enter the NLP
    }
}

#####################################################################

DecisionRule place {
  X, Y, Z, W
  { (gripper X) (object Y) (picked X Y) (placingTemporary Z) (held Y) (base W)}
  { (picked X Y)! (busy X)! (busy Y)! (held Y)! # logic only
    (stable ANY Y)! (touch X Y)! # NLP predicates
    (on Z Y) (above Y Z) (stableOn Z Y) (gripperOrientation X Y) tmp(touch X Y) tmp(touch Y Z) 
    (adjusted W Y)! (placed X Y)
    (INFEASIBLE pick ANY Y)! block(INFEASIBLE pick ANY Y) (adjusted W Y)!

    }
}

#####################################################################

DecisionRule takeknob {
  G, K, O, C
  { (gripper G) (knob K) (object O) (closingLocation C) (placed G O)}
  { (above K ANY)! (on ANY K)! (stableOn ANY K)! 
    (picked G K) (held K) (busy G) # these are only on the logical side, to enable correct preconditions
    (touch G K) (touch G C) (open G K) (stable G K) (takenKnob G K) # these are predicates that enter the NLP
    }
}



#####################################################################

DecisionRule opendrawer {
  G, K, D, F, O
  { (gripper G) (knob K) (object O) (drawer D) (openingLocation F) (takenKnob G K)}
  { (picked G K)!
    (open G K)  (touch G F) (touch K F) (touch G K)! (busy G)! (held O)! (INFEASIBLE pick G O)!
    (grasped G F)
    }
}


#####################################################################

DecisionRule pickObject {
      X, Y, F
  { (gripper X) (object Y) (openingLocation F) (grasped X F) }
  { (above Y ANY)! (on ANY Y)! (stableOn ANY Y)! 
    (pickedObject X Y) (held Y) (busy X) # these are only on the logical side, to enable correct preconditions
    (touch X Y) (gripperOrientation X Y) (pitchGripperDown X Y) (stable X Y) # these are predicates that enter the NLP
    }
}

#####################################################################
DecisionRule placeindrawer {
  G, O, D
  { (gripper G) (object O) (drawer D) (held O) (picked G O)}
  { (picked G O)! (busy G)! (busy O)! (held O)! # logic only
    (stable ANY O)! (touch G O)! # NLP predicates
    (on D O) (above O D) (stableOn D O) tmp(touch G O) tmp(touch O D)
    (INFEASIBLE pick ANY O)! block(INFEASIBLE pick ANY O)
    (placedindrawer O D)
    }
}


#####################################################################

DecisionRule closedrawer {
  G, K, D, O
  { (gripper G) (knob K) (drawer D) (picked G K) (held K) (busy G) (object O) (placedindrawer O D)}
  { (picked G K)!
    (close G K) (stablePose G) (stable G K)! (touch G K)! (held K)! (INFEASIBLE pick G K)! (INFEASIBLE open G K)!
    (closed D)
    }
}



